C51 COMPILER V9.52.0.0   NRF24L01                                                          01/28/2016 14:49:19 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN NRF24L01.OBJ
COMPILER INVOKED BY: D:\learn\Learning software\keil4\C51\BIN\C51.EXE NRF24L01.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /*******************************************************************************
   2          * 文件名 : NRF24L01.c
   3          * 实现功能:NRF24L01发送程序
   4          * 版本     作者            日期            说明
   5          * V1.0     Njh        2015/08/05       初始版本
   6          
   7          * 描述   : MCU: STC15f2k60s2     晶振: 22.1184  MHz
   8                
   9                     
  10          *******************************************************************************/ 
  11          #include "NRF24L01.h"
  12          
  13          //-------------------------- 状态标志
  14          uint  bdata sta;   // 用于保存状态寄存器的值
  15          sbit  Rx_DR =sta^6;    //接收状态
  16          sbit  Tx_DS =sta^5;    //发送状态
  17          sbit  Max_RT  =sta^4;
  18          
  19          //------------------------------------------------------ 传送的数据的特征设置
  20          #define Tx_Address_Width    5   // 要发送的地址的宽度为5字节，要于接收模块对应
  21          #define Rx_Address_Width    5   // 要接收的地址的宽度为5字节，要于发送模块对应
  22          uint const Tx_Address[Tx_Address_Width]= {0x34,0x43,0x10,0x10,0x01};//本地地址，5字节
  23          uint const Rx_ADDRESS[Rx_Address_Width]= {0x34,0x43,0x10,0x10,0x01};//接收地址，5字节
  24          
  25          
  26          /*******************************************************************************
  27          * 功能描述 : 延时函数，延时参数为 1 时，大约延时10us
  28          * 函数属性 : 内部
  29          * 输入参数 : 延时参数
  30          * 返回参数 : 无
  31          * 函数详解 : 
  32          *******************************************************************************/
  33          
  34          void Delay_us(unsigned char n)
  35          {
  36   1          unsigned char i;
  37   1          
  38   1          while(n--)
  39   1          {
  40   2              _nop_();
  41   2              _nop_();
  42   2              _nop_();
  43   2              i = 52;
  44   2              while (--i);
  45   2          }
  46   1      }
  47          
  48          /*******************************************************************************
  49          * 功能描述 : SPI读写函数，最基本的函数
  50          * 函数属性 : 内部
  51          * 输入参数 : 要写入的数据
  52          * 返回参数 : 读到的数据
  53          * 函数详解 : 
  54          
  55            最基本的函数，完成 GPIO 模拟 SPI 的功能。将输出字节（MOSI）从 MSB 循环输出，
C51 COMPILER V9.52.0.0   NRF24L01                                                          01/28/2016 14:49:19 PAGE 2   

  56          同时将输入字节（MISO）从 LSB 循环移入。上升沿读入，下降沿输出。
  57          
  58          *******************************************************************************/
  59          
  60           uint SPI_ReadWrite(uint dat)
  61          {
  62   1          uint bit_ctr;
  63   1          for(bit_ctr=0;bit_ctr<8;bit_ctr++) //一个字节数据循环8次
  64   1          {
  65   2              MOSI = (dat & 0x80);    //将dat的高位输出MOSI
  66   2              dat  = (dat << 1);      //dat数据左移，最高位数据抛弃，次高位数据占领最高位
  67   2              SCK = 1;                // SCK置高，准备传输
  68   2              dat |= MISO;            // 读取MISO数据存入到dat的最低位
  69   2              SCK = 0;                // 开始传输数据
  70   2          }
  71   1          return(dat);                //返回读到的值
  72   1      }
  73          
  74          /*******************************************************************************
  75          * 功能描述 : NRF24L01读寄存器
  76          * 函数属性 : 内部
  77          * 输入参数 : dat: 指令+寄存器地址
  78          * 返回参数 : 寄存器的值
  79          * 函数详解 : 形参为：
  80          
  81            读取寄存器值的函数：基本思路就是通过 READ_REG 命令（形参为：0x00+寄存器地址），
  82          把寄存器中的值读出来并将值返回
  83          
  84          *******************************************************************************/
  85          
  86          uchar Read_Reg(uchar dat)
  87          {
  88   1          uchar reg_val;
  89   1          
  90   1          CSN = 0;                // CSN low, initialize SPI communication...
  91   1          SPI_ReadWrite(dat);            // Select register to read from..
  92   1          reg_val = SPI_ReadWrite(0);    // ..then read registervalue
  93   1          CSN = 1;                // CSN high, terminate SPI communication
  94   1          
  95   1          return(reg_val);        // return register value
  96   1      }
  97          
  98          /*******************************************************************************
  99          * 功能描述 : NRF24L01读、写寄存器
 100          * 函数属性 : 内部
 101          * 输入参数 : dat: 指令+寄存器地址     value： 要写入的值
 102          * 返回参数 : 无
 103          * 函数详解 : 
 104          
 105            调用该函数时使用写寄存器指令（WRITE_REG），即 dat = WRITE_REG + 需要写入数据
 106          的寄存器的地址，即可将value写入到需要写入的寄存器
 107          
 108          *******************************************************************************/
 109          
 110          uint ReadWrite_Reg(uchar dat, uchar value)
 111          {
 112   1          uint status;
 113   1          
 114   1          CSN = 0;                   // CSN low, init SPI transaction
 115   1          status = SPI_ReadWrite(dat);      // select register
 116   1          SPI_ReadWrite(value);             // ..and write value to it..
 117   1          CSN = 1;                   // CSN high again
C51 COMPILER V9.52.0.0   NRF24L01                                                          01/28/2016 14:49:19 PAGE 3   

 118   1          
 119   1          return(status);            // return nRF24L01 status uchar
 120   1      }
 121          
 122          /*******************************************************************************
 123          * 功能描述 : 将NRF24L01的FIFO缓存区的数据读取存放到用户的缓存区中
 124          * 函数属性 : 内部
 125          * 输入参数 : dat: 指令+寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 126          * 返回参数 : 
 127          * 函数详解 : 
 128          
 129            接收缓冲区访问函数：主要用来读取NRF24L01的FIFO缓冲区中的数据。基本思路就是通过
 130          READ_REG 命令把数据从NRF24L01的FIFO缓存区（RD_RX_PLOAD）中读出并存到用户的缓存区
 131          （数组）
 132          
 133          *******************************************************************************/
 134          
 135          uint Read_From_FIFO_Buf(uchar dat, uchar *pBuf, uchar uchars)
 136          {
 137   1          uint status,uchar_ctr;
 138   1          
 139   1          CSN = 0;                        // Set CSN low, init SPI tranaction
 140   1          status = SPI_ReadWrite(dat);          // Select register to write to and read status uchar
 141   1          
 142   1          for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 143   1          {
 144   2              pBuf[uchar_ctr] = SPI_ReadWrite(0);    // 
 145   2          }
 146   1            
 147   1          CSN = 1;                           
 148   1          
 149   1          return(status);                    // return nRF24L01 status uchar
 150   1      }
 151          
 152          /*******************************************************************************
 153          * 功能描述 : 将用户缓存区的数据写入到NRF24L01的FIFO缓存区
 154          * 函数属性 : 内部
 155          * 输入参数 : dat: 指令+寄存器地址，pBuf：为待读出数据地址，value：读出数据的个数
 156          * 返回参数 : 
 157          * 函数详解 : 
 158          
 159            主要用来把用户缓存区（数组）里的数写入到NRF24L01的FIFO缓冲区中。基本思
 160          路就是通过WRITE_REG 命令把数据存到发射 FIFO（WR_TX_PLOAD）中去
 161          
 162          *******************************************************************************/
 163          
 164          uint Write_To_FIFO_Buf(uchar dat, uchar *pBuf, uchar uchars)
 165          {
 166   1          uint status,uchar_ctr;//定义中间变量
 167   1          
 168   1          CSN = 0;            //SPI使能       
 169   1          status = SPI_ReadWrite(dat);   
 170   1          for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //将用户数据依次写入fifo缓冲区
 171   1          {
 172   2              SPI_ReadWrite(*pBuf++);
 173   2          }
 174   1            
 175   1          CSN = 1;           //关闭SPI
 176   1          return(status);    // 
 177   1      }
 178          
 179          /*******************************************************************************
C51 COMPILER V9.52.0.0   NRF24L01                                                          01/28/2016 14:49:19 PAGE 4   

 180          * 功能描述 : 配置为数据接收模式（要使用接收模式时需要调用该函数） 
 181          * 函数属性 : 外部
 182          * 输入参数 : 无
 183          * 返回参数 : 无
 184          * 函数详解 : 
 185          *******************************************************************************/
 186          
 187          void SetRX_Mode(void)
 188          {
 189   1          CE=0;
 190   1          ReadWrite_Reg(WRITE_REG + CONFIG, 0x0f);  // IRQ收发完成中断响应，16位CRC ，主接收
 191   1          CE = 1; 
 192   1          Delay_us(130);
 193   1      }
 194          
 195          /*******************************************************************************
 196          * 功能描述 : 接收发射模块的数据，并将数据放入rx_buf用户接收缓冲区中
 197          * 函数属性 : 外部
 198          * 输入参数 : 用户的缓冲区的地址
 199          * 返回参数 : 
 200          * 函数详解 : 
 201          *******************************************************************************/
 202          
 203          unsigned char NRF24L01_RxPacket(unsigned char* Rx_Buf)
 204          {
 205   1          unsigned char revale=0;
 206   1          
 207   1          SetRX_Mode();//设置为接收模式
 208   1          
 209   1          sta=Read_Reg(STATUS); // 读取状态寄存其来判断数据接收状况
 210   1          if(Rx_DR)       // 判断是否接收到数据
 211   1          {
 212   2              CE = 0;       //SPI使能
 213   2              Read_From_FIFO_Buf(RD_RX_PLOAD,Rx_Buf,Tx_Data_Width);// read receive payload from RX_FIFO buffer
 214   2              revale =1;      //读取数据完成标志
 215   2          }
 216   1          ReadWrite_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 217   1          return revale;
 218   1      }
 219          
 220          /*******************************************************************************
 221          * 功能描述 : 将tx_buf用户缓冲区中的数据发送给接收模块
 222          * 函数属性 : 外部
 223          * 输入参数 : 用户的缓冲区的地址
 224          * 返回参数 : 发送的结果
 225          * 函数详解 : 
 226          *******************************************************************************/
 227          
 228          uchar NRF24L01_TxPacket(unsigned char * Tx_Buf)
 229          {
 230   1          unsigned char revale=0;
 231   1          CE=0;     //StandBy I模式 
 232   1          Write_To_FIFO_Buf(WRITE_REG + RX_ADDR_P0, Tx_Address, Tx_Address_Width); // 装载接收端地址
 233   1          Write_To_FIFO_Buf(WR_TX_PLOAD, Tx_Buf, Tx_Data_Width);       // 装载数据  
 234   1          ReadWrite_Reg   (WRITE_REG + CONFIG, 0x0e);        // IRQ收发完成中断响应，16位CRC，主发送
 235   1          CE=1;    //置高CE，激发数据发送
 236   1          Delay_us(10);
 237   1          
 238   1          ReadWrite_Reg(WRITE_REG+STATUS,0XFF); //清楚标志位寄存器
 239   1          sta=Read_Reg(STATUS); // 读取状态寄存其来判断数据接收状况
 240   1          if(!Tx_DS)//如果发送成功，返回1（发送成功后标志位TX_DS被置0）
 241   1          {
C51 COMPILER V9.52.0.0   NRF24L01                                                          01/28/2016 14:49:19 PAGE 5   

 242   2              revale = 1;
 243   2          }
 244   1          return revale; //返回发送结果
 245   1      }
 246          
 247          /*******************************************************************************
 248          * 功能描述 : NRF24L01初始化
 249          * 函数属性 : 外部
 250          * 输入参数 : 无
 251          * 返回参数 : 无
 252          * 函数详解 : 
 253          *******************************************************************************/
 254          
 255          void init_NRF24L01(void)
 256          {
 257   1        
 258   1          Delay_us(100);
 259   1          CE=0;    // 使能
 260   1          CSN=1;   // Spi disable 
 261   1          SCK=0;   // Spi clock line init high
 262   1          
 263   1          Write_To_FIFO_Buf(WRITE_REG + TX_ADDR,    Tx_Address, Tx_Address_Width);//写本地地址
 264   1          Write_To_FIFO_Buf(WRITE_REG + RX_ADDR_P0, Rx_ADDRESS, Rx_Address_Width);//写接收端地址
 265   1          ReadWrite_Reg(WRITE_REG + EN_AA, 0x01); //频道0自动 ACK应答允许 
 266   1          ReadWrite_Reg(WRITE_REG + EN_RXADDR, 0x01); //允许接收地址只有频道0，如果需要多频道可以参考Page21  
 267   1          ReadWrite_Reg(WRITE_REG + RF_CH, 0);  //设置信道工作为2.4GHZ，收发必须一致
 268   1          ReadWrite_Reg(WRITE_REG + RX_PW_P0, Rx_Data_Width);//设置接收数据长度，本次设置为RX_PLOAD_WIDTH个字节
 269   1          ReadWrite_Reg(WRITE_REG + RF_SETUP, 0x07); //设置发射速率为1MHZ，发射功率为最大值0dB  
 270   1          ReadWrite_Reg(WRITE_REG + CONFIG, 0x0e); //IRQ收发完成中断响应，16位CRC，主发送
 271   1      }
 272          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    390    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     11      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
